// Code generated by MockGen. DO NOT EDIT.
// Source: application/article.go

// Package mock_application is a generated GoMock package.
package mock_application

import (
	entity "blog/app/domain/entity"
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockArticleInteractor is a mock of ArticleInteractor interface
type MockArticleInteractor struct {
	ctrl     *gomock.Controller
	recorder *MockArticleInteractorMockRecorder
}

// MockArticleInteractorMockRecorder is the mock recorder for MockArticleInteractor
type MockArticleInteractorMockRecorder struct {
	mock *MockArticleInteractor
}

// NewMockArticleInteractor creates a new mock instance
func NewMockArticleInteractor(ctrl *gomock.Controller) *MockArticleInteractor {
	mock := &MockArticleInteractor{ctrl: ctrl}
	mock.recorder = &MockArticleInteractorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockArticleInteractor) EXPECT() *MockArticleInteractorMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockArticleInteractor) Get(ctx context.Context, id int64) (*entity.Article, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*entity.Article)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockArticleInteractorMockRecorder) Get(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockArticleInteractor)(nil).Get), ctx, id)
}

// List mocks base method
func (m *MockArticleInteractor) List(ctx context.Context) ([]*entity.Article, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx)
	ret0, _ := ret[0].([]*entity.Article)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockArticleInteractorMockRecorder) List(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockArticleInteractor)(nil).List), ctx)
}
