// Code generated by MockGen. DO NOT EDIT.
// Source: proto/api/article.pb.go

// Package mock_api is a generated GoMock package.
package mock_api

import (
	api "blog/app/proto/api"
	context "context"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockArticleClient is a mock of ArticleClient interface
type MockArticleClient struct {
	ctrl     *gomock.Controller
	recorder *MockArticleClientMockRecorder
}

// MockArticleClientMockRecorder is the mock recorder for MockArticleClient
type MockArticleClientMockRecorder struct {
	mock *MockArticleClient
}

// NewMockArticleClient creates a new mock instance
func NewMockArticleClient(ctrl *gomock.Controller) *MockArticleClient {
	mock := &MockArticleClient{ctrl: ctrl}
	mock.recorder = &MockArticleClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockArticleClient) EXPECT() *MockArticleClientMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockArticleClient) Get(ctx context.Context, in *api.ArticleService_GetRequest, opts ...grpc.CallOption) (*api.ArticleService_GetResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*api.ArticleService_GetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockArticleClientMockRecorder) Get(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockArticleClient)(nil).Get), varargs...)
}

// List mocks base method
func (m *MockArticleClient) List(ctx context.Context, in *api.ArticleService_ListRequest, opts ...grpc.CallOption) (*api.ArticleService_ListResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].(*api.ArticleService_ListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockArticleClientMockRecorder) List(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockArticleClient)(nil).List), varargs...)
}

// MockArticleServer is a mock of ArticleServer interface
type MockArticleServer struct {
	ctrl     *gomock.Controller
	recorder *MockArticleServerMockRecorder
}

// MockArticleServerMockRecorder is the mock recorder for MockArticleServer
type MockArticleServerMockRecorder struct {
	mock *MockArticleServer
}

// NewMockArticleServer creates a new mock instance
func NewMockArticleServer(ctrl *gomock.Controller) *MockArticleServer {
	mock := &MockArticleServer{ctrl: ctrl}
	mock.recorder = &MockArticleServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockArticleServer) EXPECT() *MockArticleServerMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockArticleServer) Get(arg0 context.Context, arg1 *api.ArticleService_GetRequest) (*api.ArticleService_GetResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*api.ArticleService_GetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockArticleServerMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockArticleServer)(nil).Get), arg0, arg1)
}

// List mocks base method
func (m *MockArticleServer) List(arg0 context.Context, arg1 *api.ArticleService_ListRequest) (*api.ArticleService_ListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].(*api.ArticleService_ListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockArticleServerMockRecorder) List(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockArticleServer)(nil).List), arg0, arg1)
}
